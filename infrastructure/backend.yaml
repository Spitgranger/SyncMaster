AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for SyncMaster Backend

Parameters:
  Name:
    Type: String
    Description: >-
      AWS Resources frequently have a name tag, to help identify the resource.
      Use this parameter as the name tag to help identify it as belonging to
      this template.

  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: >-
      Deployment environment of the stack

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    Runtime: python3.13
    Architectures:
      - x86_64
    Environment:
      Variables:
        USER_POOL_CLIENT_ID: !Ref UserPoolClient
        USER_POOL_ID: !Ref UserPool
        TABLE_NAME: !Ref Database

Resources:
  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${Name}
      EndpointConfiguration: REGIONAL
      StageName: !Sub ${Env}
      TracingEnabled: False
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date'"
        MaxAge: 600

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Sid: AllowLambdaServiceToAssumeRole
            Principal:
              Service:
                - !Sub 'lambda.${AWS::URLSuffix}'
            Action:
              - sts:AssumeRole

  CognitoAccessPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Access to necessary cognito actions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminGetUser
                - cognito-idp:ListUsers
              Resource:
                - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"


  DatabaseRead:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Ready Only Access to a DynamoDB Table
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !GetAtt Database.Arn
              - !Sub ${Database.Arn}/index/*

  DatabaseWrite:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Write Access to a DynamoDB Table
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt Database.Arn

  BucketWritePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Write access to bucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - !Sub arn:aws:s3:::${Bucket}/*

  BucketReadPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Read access to bucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub arn:aws:s3:::${Bucket}/*

  S3ReadRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref BucketReadPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: sts:AssumeRole

  S3WriteRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref BucketReadPolicy
        - !Ref BucketWritePolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: sts:AssumeRole

  CognitoAccessRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CognitoLambdaExecutionRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - !Ref CognitoAccessPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: !GetAtt LambdaExecutionRole.Arn
              Action:
                - sts:AssumeRole

  DatabaseReadRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref DatabaseRead
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: sts:AssumeRole

  DatabaseWriteRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref DatabaseRead
        - !Ref DatabaseWrite
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: sts:AssumeRole

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SyncMasterUsers
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: company
          Required: false
        - AttributeDataType: String
          Name: role
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AccessTokenValidity: 12
      ClientName: SyncMasterAppClient
      IdTokenValidity: 12
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  Database:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: last_modified_time
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: last_modified_time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: False
      BillingMode: PAY_PER_REQUEST

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: syncmaster-document-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'GET'
              - 'POST'
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Date
            Id: myCORSRuleId1
            MaxAge: 3600
 

  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: service.handler.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      CodeUri: ../src/backend
      Description: API handler function
      Events:
        AnyApiEvent:
          Type: Api
          Properties:
            # NOTE: this is a catch-all rule to simplify rev0 development.
            # explicit routes and methods are recommended once we move to Rev1
            Path: /{proxy+} # Send requests on any path to the lambda function
            Method: ANY # Send requests using any http method to the lambda function
            RestApiId: !Ref API
      Environment:
        Variables:
          COGNITO_ACCESS_ROLE: !GetAtt CognitoAccessRole.Arn
          TABLE_READ_ROLE: !GetAtt DatabaseReadRole.Arn
          TABLE_WRITE_ROLE: !GetAtt DatabaseWriteRole.Arn
          DOCUMENT_STORAGE_BUCKET_READ_ROLE: !GetAtt S3ReadRole.Arn
          DOCUMENT_STORAGE_BUCKET_WRITE_ROLE: !GetAtt S3WriteRole.Arn
          DOCUMENT_STORAGE_BUCKET_NAME: !Ref Bucket

Outputs:
    SyncMasterApi:
        Description: "API Gateway Base Path for SyncMaster backend API"
        Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Env}/"
